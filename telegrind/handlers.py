from pathlib import Path
from re import Match

import aiohttp
import cv2
import numpy as np
from aiogram import Dispatcher, Router, flags, F, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, PhotoSize, FSInputFile
from gspread_asyncio import (
    AsyncioGspreadClientManager,
    AsyncioGspreadSpreadsheet,
    AsyncioGspreadClient
)
from qreader import QReader
from sqlalchemy import select
from sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession

from .models import Chat, File
from .sheets import Outcome, Loan, ConfigSheet, Commodity

qr_reader = QReader()


dp = Dispatcher()
router = Router()


TIP_TEXT = """<b>–†–∞—Å—Ö–æ–¥—ã üí∏</b>
---------------
–†–∞—Å—Ö–æ–¥ –≤ —Ç–µ–Ω–≥–µ
<pre>500</pre>

–†–∞—Å—Ö–æ–¥ –≤ —Ç–µ–Ω–≥–µ –Ω–∞ —à–æ–∫–æ–ª–∞–¥–∫—É
<pre>101.5 —à–æ–∫–æ–ª–∞–¥–∫–∞</pre>

–†–∞—Å—Ö–æ–¥ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥
<pre>5.4 USD —Ö–æ—Å—Ç–∏–Ω–≥</pre>

–†–∞—Å—Ö–æ–¥ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥ –≤—á–µ—Ä–∞
<pre>41 USD –≤—á–µ—Ä–∞ —Ö–æ—Å—Ç–∏–Ω–≥</pre>


<b>–ü–æ–∫—É–ø–∫–∏ –∏–∑ —á–µ–∫–∞ üßæ</>
---------------
–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ QR-–∫–æ–¥ –≤–∞—à–µ–≥–æ —á–µ–∫–∞, –∏–ª–∏ –¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –Ω–∞ —Å–∞–π—Ç–µ consumer.oofd.kz.
–Ø –∑–∞–Ω–µ—Å—É –ø–æ–∫—É–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –∑–∞–ø–∏—à—É –æ–±—â—É—é —Å—É–º–º—É —á–µ–∫–∞ –≤ —Ä–∞—Å—Ö–æ–¥.



<b>–ó–∞–π–º—ã ‚õì</b>
---------------
–í–∞—Å—è –∑–∞–Ω—è–ª <i>(–∏–ª–∏ –∑–∞–±—Ä–∞–ª)</i> —É –≤–∞—Å 500 —Ç–µ–Ω–≥–µ —Å–µ–≥–æ–¥–Ω—è
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω 500</pre>

–í–∞—Å—è –≤–µ—Ä–Ω—É–ª <i>(–∏–ª–∏ –∑–∞–Ω—è–ª)</i> –≤–∞–º 500 —Ç–µ–Ω–≥–µ —Å–µ–≥–æ–¥–Ω—è
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω +500</pre>

–í–∞—Å—è –∑–∞–Ω—è–ª —É –≤–∞—Å 10 –¥–æ–ª–ª–∞—Ä–æ–≤ 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω 10 USD 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥</pre>

–í–∞—Å—è –∑–∞–Ω—è–ª —É –≤–∞—Å 10 –¥–æ–ª–ª–∞—Ä–æ–≤ 1 —è–Ω–≤–∞—Ä—è
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω 10 USD 1 —è–Ω–≤–∞—Ä—è</pre>

–í–∞—Å—è –∑–∞–Ω—è–ª —É –≤–∞—Å 10 –¥–æ–ª–ª–∞—Ä–æ–≤ —Ç—Ä–∏ –¥–Ω—è –Ω–∞–∑–∞–¥ –Ω–∞ –∂–± —Å—Ç–∞–≤–æ—á–∫—É
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω 10 USD —Ç—Ä–∏ –¥–Ω—è –Ω–∞–∑–∞–¥ –Ω–∞ –∂–± —Å—Ç–∞–≤–æ—á–∫—É</pre>

<b>–ò–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å</b>
---------------
–ß—Ç–æ–±—ã <i>–∏–∑–º–µ–Ω–∏—Ç—å</i> –∑–∞–ø–∏—Å—å, –ø—Ä–æ—Å—Ç–æ <i>–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ</i> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. 

–ß—Ç–æ–±—ã <i>—É–¥–∞–ª–∏—Ç—å</i> –∑–∞–ø–∏—Å—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å–∞ "-".
"""


@dp.update.middleware()
async def populate_chat_data(handler, event, data):
    async_session: async_sessionmaker[AsyncSession] = data['async_session']
    async with async_session() as session:
        async with session.begin():

            result = await session.execute(
                select(Chat).where(Chat.chat_id == event.event.chat.id)
            )
            chat = result.scalar_one_or_none()
            if not chat:
                chat = Chat(chat_id=event.event.chat.id)
                session.add(chat)

        agcm: AsyncioGspreadClientManager = data['agcm']
        agc: AsyncioGspreadClient = await agcm.authorize()

        data['agc'] = agc
        data['chat'] = chat
        data['session'] = session

        return await handler(event, data)


class Form(StatesGroup):
    request_sheet_url = State()


@router.message(CommandStart())
@flags.chat_action(action='typing', initial_sleep=0.5)
async def start(message: Message, state: FSMContext, chat: Chat, session: AsyncSession, bot: Bot):
    await state.set_state(Form.request_sheet_url)

    filename = 'intro.mp4'

    async with session.begin():
        result = await session.execute(
            select(File).where(File.filename == filename)
        )
        file = result.scalar_one_or_none()
        if not file:
            video = FSInputFile(str(Path('static') / Path(filename)))
        else:
            video = file.file_id

        message = await message.answer_video(
            video,
            caption="""\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–µ–∂–∏–π <a href="https://docs.google.com/spreadsheets">Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç</a>, \
–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å–æ –º–Ω–æ–π:
–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–µ–π –ø–æ—á—Ç—ã 
<pre>telegrind-bot@telegrind.iam.gserviceaccount.com</pre>
–∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    
–ó–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ—ë –º–Ω–µ, —á—Ç–æ–±—ã —è —Å–º–æ–≥–ª–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.
    """
        )
        if not file:
            session.add(
                File(
                    file_id=message.video.file_id,
                    filename=filename,
                )
            )


@router.message(Form.request_sheet_url)
@flags.chat_action(action='typing', initial_sleep=0.5)
async def obtain_sheet_url(message: Message, session: AsyncSession, chat: Chat, state: FSMContext, agc: AsyncioGspreadClient, bot: Bot):
    sheet_url = message.text
    try:
        ags = await agc.open_by_url(sheet_url)
        await ConfigSheet(ags).get_agw()
    except Exception as e:
        return await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–¥–∞–ª–∏ –º–Ω–µ –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –∏ –≤—ã—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞. "
            f"–î–µ—Ç–∞–ª–∏: \n{e}"
        )

    # on success
    chat.sheet_url = sheet_url
    await session.commit()

    await state.clear()
    await message.answer(
        f"""–í—Å—ë –∫—Ä—É—Ç–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ:
    
{TIP_TEXT}
    
–í—Å—ë —ç—Ç–æ —è –∑–∞–ø–∏—à—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–æ –º–Ω–æ–π –ø–æ—à–∞—Ä–∏–ª–∏.
–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å, —è —Ö—Ä–∞–Ω—é —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç."""
    )
    await message.pin(disable_notification=True)


@router.message(F.text.regexp(Outcome.pattern))
@flags.chat_action(action='typing', initial_sleep=0.5)
async def record_outcome(message: Message, agc: AsyncioGspreadClient, chat: Chat):
    ags: AsyncioGspreadSpreadsheet = await agc.open_by_url(chat.sheet_url)
    await Outcome(ags).record(message)
    return await message.reply('–ó–∞–ø–∏—Å–∞–ª–∞!')


@router.message(F.text.regexp(Loan.pattern))
@flags.chat_action(action='typing', initial_sleep=0.5)
async def record_loan(message: Message, agc: AsyncioGspreadClient, chat: Chat):
    ags: AsyncioGspreadSpreadsheet = await agc.open_by_url(chat.sheet_url)
    await Loan(ags).record(message)
    return await message.reply('–ó–∞–ø–∏—Å–∞–ª–∞!')


@router.message(F.photo)
@flags.chat_action(action='typing', initial_sleep=0.5)
async def parse_check_by_qr_oofd(message: Message, bot: Bot, agc: AsyncioGspreadClient, chat: Chat):
    ps: PhotoSize = message.photo[-1]
    content = await bot.download(ps.file_id)

    cv2img = cv2.imdecode(np.frombuffer(content.read(), np.uint8), 1)
    image = cv2.cvtColor(cv2img, cv2.COLOR_BGR2RGB)
    decoded_text = qr_reader.detect_and_decode(image=image)
    if not decoded_text:
        return await message.reply("–ù–µ –Ω–∞—à–ª–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ QR –∫–æ–¥–∞!")

    urls = [v for v in decoded_text if v and 'oofd.kz' in v]
    if not urls:
        msgs = []
        for i, url in enumerate(decoded_text):
            if not url:
                msgs.append(f"QR #{i+1}: –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–¥")
            elif 'oofd.kz' not in url:
                msgs.append(f"QR #{i+1}: –∫–æ –∫–æ–¥—É –Ω–µ —Ç–∞ —Å—Å—ã–ª–∫–∞")
        return await message.reply('\n'.join(msgs))

    url = urls[0]
    async with aiohttp.ClientSession() as session:
        rs = await session.get(url, ssl=False)
        ticket_token = rs.url.path.split('/')[-1]
        async with session.get(f'https://consumer.oofd.kz/api/tickets/ticket/{ticket_token}', ssl=False) as rs2:
            data = await rs2.json()

        if data.get('message') == 'ticket.not.found.error':
            return await message.reply("–í oofd –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ —á–µ–∫–∞...")

    ags: AsyncioGspreadSpreadsheet = await agc.open_by_url(chat.sheet_url)

    # write into commodities list and into
    await Commodity(ags).record(message, data)
    await Outcome(ags).write_row(
        Outcome.from_ticket(message, data)
    )

    await message.reply('–ó–∞–ø–∏—Å–∞–ª–∞!')


@router.message(F.text.regexp(r'https?\:\/\/consumer\.oofd\.kz\/(?:ticket\/|\?uid\=)([0-9a-f\-]{36})').as_('match'))
async def parse_ticket_by_url(message: Message, chat: Chat, agc: AsyncioGspreadClient, match: Match):
    token = match.groups()[0]
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://consumer.oofd.kz/api/tickets/ticket/{token}', ssl=False) as rs2:
            data = await rs2.json()

    ags: AsyncioGspreadSpreadsheet = await agc.open_by_url(chat.sheet_url)

    # write into commodities and expenses lists
    await Commodity(ags).record(message, data)
    await Outcome(ags).write_row(
        Outcome.from_ticket(message, data)
    )

    await message.reply('–ó–∞–ø–∏—Å–∞–ª–∞!')


@router.edited_message(F.text)
@flags.chat_action(action='typing', initial_sleep=0.5)
async def update_changed_message(edited_message: Message, agc: AsyncioGspreadClient, chat: Chat):
    ags: AsyncioGspreadSpreadsheet = await agc.open_by_url(chat.sheet_url)
    for sheet in (Outcome(ags), Loan(ags)):
        cell = await sheet.search_row(edited_message.message_id)
        if cell:
            row = await sheet.make_row(edited_message)
            await sheet.change_row(cell.row, row)
            return await edited_message.reply(f'–ü–æ–ø—Ä–∞–≤–∏–ª–∞!')

    return await edited_message.reply(f'–ù–µ –Ω–∞—à–ª–∞ —ç—Ç–æ–≥–æ –≤ –∫–Ω–∏–≥–µ...')


@router.message(F.reply_to_message.text)
@flags.chat_action(action='typing', initial_sleep=0.5)
async def delete_record(message: Message, agc: AsyncioGspreadClient, chat: Chat):
    if message.text.strip() == '-':
        # delete record
        msg = message.reply_to_message
        ags: AsyncioGspreadSpreadsheet = await agc.open_by_url(chat.sheet_url)
        for sheet in (Outcome(ags), Loan(ags)):
            cell = await sheet.search_row(msg.message_id)
            if cell:
                await sheet.delete_row(cell.row)
                return await msg.reply(f'–£–¥–∞–ª–∏–ª–∞!')
        return await msg.reply(f'–ù–µ –Ω–∞—à–ª–∞ —ç—Ç–æ–≥–æ –≤ –∫–Ω–∏–≥–µ...')


@router.message(F.text)
async def catchall(message: Message):
    return await message.reply(f'–ù–µ –ø–æ–Ω—è–ª–∞... \n\n{TIP_TEXT}')
