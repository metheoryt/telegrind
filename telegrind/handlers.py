from re import Match

from aiogram import Dispatcher, Router, flags, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from gspread_asyncio import (
    AsyncioGspreadClientManager,
    AsyncioGspreadSpreadsheet,
    AsyncioGspreadClient
)
from sqlalchemy import select
from sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession

from .models import Chat
from .sheets import Outcome, Loan, ConfigSheet

dp = Dispatcher()
router = Router()


TIP_TEXT = """<b>–†–∞—Å—Ö–æ–¥—ã üí∏</b>
---------------
–†–∞—Å—Ö–æ–¥ –≤ —Ç–µ–Ω–≥–µ
<pre>500</pre>

–†–∞—Å—Ö–æ–¥ –≤ —Ç–µ–Ω–≥–µ –Ω–∞ —à–æ–∫–æ–ª–∞–¥–∫—É
<pre>101.5 —à–æ–∫–æ–ª–∞–¥–∫–∞</pre>

–†–∞—Å—Ö–æ–¥ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥
<pre>5.4 USD —Ö–æ—Å—Ç–∏–Ω–≥</pre>

–†–∞—Å—Ö–æ–¥ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∑–∞ 1 —è–Ω–≤–∞—Ä—è 2023 –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥
<pre>41 USD 01.01.2023 —Ö–æ—Å—Ç–∏–Ω–≥</pre>


<b>–ó–∞–π–º—ã ‚õì</b>
---------------
–í–∞—Å—è –∑–∞–Ω—è–ª <i>(–∏–ª–∏ –∑–∞–±—Ä–∞–ª)</i> —É –≤–∞—Å 500 —Ç–µ–Ω–≥–µ —Å–µ–≥–æ–¥–Ω—è
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω 500</pre>

–í–∞—Å—è –≤–µ—Ä–Ω—É–ª <i>(–∏–ª–∏ –∑–∞–Ω—è–ª)</i> –≤–∞–º 500 —Ç–µ–Ω–≥–µ —Å–µ–≥–æ–¥–Ω—è
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω +500</pre>

–í–∞—Å—è –∑–∞–Ω—è–ª —É –≤–∞—Å 10 –¥–æ–ª–ª–∞—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω 10 USD</pre>

–í–∞—Å—è –∑–∞–Ω—è–ª —É –≤–∞—Å 10 –¥–æ–ª–ª–∞—Ä–æ–≤ 1 —è–Ω–≤–∞—Ä—è 2023-–≥–æ
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω 10 USD 01.01.2023</pre>

–í–∞—Å—è –∑–∞–Ω—è–ª —É –≤–∞—Å 10 –¥–æ–ª–ª–∞—Ä–æ–≤ 1 —è–Ω–≤–∞—Ä—è 2023-–≥–æ –Ω–∞ –∂–± —Å—Ç–∞–≤–æ—á–∫—É
<pre>–∑–∞–π–º –í–∞—Å—è –ü—É–ø–∫–∏–Ω 10 USD 01.01.2023 –Ω–∞ –∂–± —Å—Ç–∞–≤–æ—á–∫—É</pre>"""


@dp.update.middleware()
async def populate_chat_data(handler, event, data):
    async_session: async_sessionmaker[AsyncSession] = data['async_session']
    async with async_session() as session:
        async with session.begin():

            result = await session.execute(
                select(Chat).where(Chat.chat_id == event.event.chat.id)
            )
            chat = result.scalar_one_or_none()
            if not chat:
                chat = Chat(chat_id=event.event.chat.id)
                session.add(chat)

        agcm: AsyncioGspreadClientManager = data['agcm']
        agc: AsyncioGspreadClient = await agcm.authorize()

        data['agc'] = agc
        data['chat'] = chat
        data['session'] = session

        return await handler(event, data)


class Form(StatesGroup):
    request_sheet_url = State()


@router.message(CommandStart())
@flags.chat_action(action='typing', initial_sleep=0.5)
async def start(message: Message, state: FSMContext, chat: Chat, agc: AsyncioGspreadClient):
    # if chat.sheet_url:
    #     ags: AsyncioGspreadSpreadsheet = await agc.open_by_url(chat.sheet_url)
    #     return await message.answer(f'–ó–∞ —ç—Ç–∏–º —á–∞—Ç–æ–º —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç "{ags.title}"')

    await state.set_state(Form.request_sheet_url)
    await message.answer(
        """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–µ–∂–∏–π Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç, –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å–æ –º–Ω–æ–π, \
—É–∫–∞–∑–∞–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ—á—Ç—ã <pre>telegrind-bot@telegrind.iam.gserviceaccount.com</pre> –∏ –Ω–∞–∑–Ω–∞—á–∏–≤ —Ä–æ–ª—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.

–ó–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ—ë –º–Ω–µ, —á—Ç–æ–±—ã —è —Å–º–æ–≥–ª–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.
"""
    )


@router.message(Form.request_sheet_url)
@flags.chat_action(action='typing', initial_sleep=0.5)
async def obtain_sheet_url(message: Message, session: AsyncSession, chat: Chat, state: FSMContext, agc: AsyncioGspreadClient):
    sheet_url = message.text
    try:
        ags = await agc.open_by_url(sheet_url)
        await ConfigSheet(ags).get_agw()
    except Exception as e:
        return await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–¥–∞–ª–∏ –º–Ω–µ –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –∏ –≤—ã—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞. "
            f"–î–µ—Ç–∞–ª–∏: \n{e}"
        )

    # on success
    chat.sheet_url = sheet_url
    await session.commit()

    await state.clear()
    await message.answer(
        f"""–í—Å—ë –∫—Ä—É—Ç–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ:
    
{TIP_TEXT}
    
–í—Å—ë —ç—Ç–æ —è –∑–∞–ø–∏—à—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–æ –º–Ω–æ–π –ø–æ—à–∞—Ä–∏–ª–∏.
–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å, —è —Ö—Ä–∞–Ω—é —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç."""
    )


@router.message(F.text.regexp(Outcome.pattern))
@flags.chat_action(action='typing', initial_sleep=0.5)
async def record_outcome(message: Message, agc: AsyncioGspreadClient, chat: Chat):
    ags: AsyncioGspreadSpreadsheet = await agc.open_by_url(chat.sheet_url)
    cfg = ConfigSheet(ags)
    await Outcome(ags).record(message, cfg)
    return await message.reply('–ó–∞–ø–∏—Å–∞–ª–∞!')


@router.message(F.text.regexp(Loan.pattern))
@flags.chat_action(action='typing', initial_sleep=0.5)
async def record_outcome(message: Message, agc: AsyncioGspreadClient, chat: Chat):
    ags: AsyncioGspreadSpreadsheet = await agc.open_by_url(chat.sheet_url)
    cfg = ConfigSheet(ags)
    await Loan(ags).record(message, cfg)
    return await message.reply('–ó–∞–ø–∏—Å–∞–ª–∞!')


@router.message()
async def catchall(message: Message):
    return await message.answer(f'–ù–µ –ø–æ–Ω—è–ª–∞... \n\n{TIP_TEXT}')
